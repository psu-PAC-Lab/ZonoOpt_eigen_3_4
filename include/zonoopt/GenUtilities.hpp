#ifndef ZONOOPT_GENUTILITIES_HPP_
#define ZONOOPT_GENUTILITIES_HPP_

/**
 * @file GenUtilities.hpp
 * @author Josh Robbins (jrobbins@psu.edu)
 * @brief General utility functions for ZonoOpt library.
 * @version 1.0
 * @date 2025-10-21
 *
 * @copyright Copyright (c) 2025
 *
 */

#include <vector>
#include <sstream>
#include <iostream>

namespace ZonoOpt::detail
{
    // generated by Gemini
    template<typename T>
    void combinations_util(const std::vector<T>& elements, const size_t k, const size_t start_index,
                           std::vector<T>& current_combination,
                           std::vector<std::vector<T>>& result)
    {
        // Base case: Combination is complete (size k reached)
        if (current_combination.size() == k)
        {
            result.push_back(current_combination);
            return;
        }

        // Recursive step: Iterate over available elements
        for (size_t i = start_index; i < elements.size(); ++i)
        {
            // ðŸŒŸ Pruning optimization: stop if there aren't enough elements left to form a k-combination
            if (elements.size() - i < k - current_combination.size())
            {
                return;
            }

            // 1. Include elements[i]
            current_combination.push_back(elements[i]);

            // 2. Recurse (start from i + 1 to prevent repeats)
            combinations_util(elements, k, i + 1, current_combination, result);

            // 3. Backtrack (remove element to try the next possibility)
            current_combination.pop_back();
        }
    }

    // generated by Gemini
    template<typename T>
    std::vector<std::vector<T>> get_combinations(const std::vector<T>& input_set, const size_t k)
    {
        if (k > input_set.size())
        {
            return {}; // Cannot choose k elements from a smaller set
        }

        // Copy set elements to a vector. std::set ensures they are already sorted.
        std::vector<T> elements(input_set.begin(), input_set.end());

        std::vector<std::vector<T>> result;
        std::vector<T> current_combination;

        // Start the recursive process from the first element (index 0)
        combinations_util(elements, k, 0, current_combination, result);
        return result;
    }

    inline void print_str(std::stringstream& ss)
    {
#ifdef IS_PYTHON_ENV
        py::print(ss.str());
#else
        std::cout << ss.str() << std::endl;
#endif
        ss.str("");
    }
}

#endif